<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sVeloper&#39;s</title>
  <subtitle>철인 뛰는 개발자</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="http://khackskjs.github.io/"/>
  <updated>2018-01-06T16:14:57.000Z</updated>
  <id>http://khackskjs.github.io/</id>
  
  <author>
    <name>Robert Kim</name>
    <email>khackskjs@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>English Youbute LiveAcademy Will vs Be going to</title>
    <link href="http://khackskjs.github.io/2018/01/06/English-Youbute-LiveAcademy-Will-vs-Be-going-to/"/>
    <id>http://khackskjs.github.io/2018/01/06/English-Youbute-LiveAcademy-Will-vs-Be-going-to/</id>
    <published>2018-01-06T14:49:45.000Z</published>
    <updated>2018-01-06T16:14:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="‘Will’-vs-‘Be-going-to’"><a href="#‘Will’-vs-‘Be-going-to’" class="headerlink" title="‘Will’ vs ‘Be going to’"></a>‘Will’ vs ‘Be going to’</h1><p>Youtube의 <a href="https://www.youtube.com/watch?v=pupJXIgRIfk" target="_blank" rel="external">will 과 be going to의 차이</a>를 기억하기 위해 정리한 내용입니다.</p>
<h2 id="Sumary"><a href="#Sumary" class="headerlink" title="Sumary"></a>Sumary</h2><table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Will</th>
<th style="text-align:center">Be going to</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">의미</td>
<td style="text-align:center">의사/의지를 표현</td>
<td style="text-align:center">계획, 예정</td>
</tr>
<tr>
<td style="text-align:center">Usage</td>
<td style="text-align:center">I’ll ask her when I see her</td>
<td style="text-align:center">I’m going to give a presentation in class</td>
</tr>
</tbody>
</table>
<h2 id="Be-going-to"><a href="#Be-going-to" class="headerlink" title="Be going to"></a>Be going to</h2><p>이미 하기로 결정난 것. (계획, 예정)</p>
<blockquote>
<p>I’m going to wake up early tomorrow.<br>I’m going to go to bed late tonight.<br>I’m going to watch a movie this weekend.<br>I’m going to hang out with my friends tonight.<br>I’m going to have a drink.</p>
</blockquote>
<h2 id="Will"><a href="#Will" class="headerlink" title="Will"></a>Will</h2><p>‘하겠다’라는 의사/의지를 표현</p>
<blockquote>
<p>You don’t have to do that, I’ll do that.<br>I’ll lend you 50 dollars.<br>I’ll help you.<br>I’ll ask her when I see her.</p>
</blockquote>
<h2 id="Will-vs-Be-going-to"><a href="#Will-vs-Be-going-to" class="headerlink" title="Will vs Be going to"></a>Will vs Be going to</h2><p>계획/예정 이냐 아니냐의 관점에서 판단하면 될 듯</p>
<p>Q. My mother is sick right now and she’s at the hospital.</p>
<blockquote>
<p>A. 아. 네 알고 있습니다. 이번 주말에 병문안 드릴겁니다.<br>Yes, I know. I’m going to visit her this weekend<br>B. 아. 정말요? 어쩌죠? 너무 유감이에요. 제가 이번 주말에 병문안 드릴게요.<br>Oh, really? I’m so sorry to hear that. I’ll visit her this weekend.</p>
</blockquote>
<p>example</p>
<blockquote>
<p>Next week, on Monday, I’m going to give a presentation in calss, so I’m going to prepare for that this weekend.<br>I’ll take care of that<br>I’ll drive you to the airport.<br>I’ll stop by the convenient store on my way there</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;‘Will’-vs-‘Be-going-to’&quot;&gt;&lt;a href=&quot;#‘Will’-vs-‘Be-going-to’&quot; class=&quot;headerlink&quot; title=&quot;‘Will’ vs ‘Be going to’&quot;&gt;&lt;/a&gt;‘Will’ vs ‘Be goi
    
    </summary>
    
    
      <category term="English" scheme="http://khackskjs.github.io/tags/English/"/>
    
      <category term="LiveAcademy" scheme="http://khackskjs.github.io/tags/LiveAcademy/"/>
    
  </entry>
  
  <entry>
    <title>Could Would 사용하기</title>
    <link href="http://khackskjs.github.io/2018/01/03/English-Youtube-LiveAcademy-Could-Would/"/>
    <id>http://khackskjs.github.io/2018/01/03/English-Youtube-LiveAcademy-Could-Would/</id>
    <published>2018-01-03T13:10:59.000Z</published>
    <updated>2018-01-06T16:15:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Would-Could-자연스럽게-사용하기"><a href="#Would-Could-자연스럽게-사용하기" class="headerlink" title="Would/Could 자연스럽게 사용하기"></a>Would/Could 자연스럽게 사용하기</h1><p>Youtube의 <a href="https://www.youtube.com/watch?v=GTCR0fNEyms" target="_blank" rel="external">would와 could 올바르게 이해하고 자연스럽게 사용하기</a>를 기억하기 위해 정리한 내용입니다.</p>
<h2 id="Sumary"><a href="#Sumary" class="headerlink" title="Sumary"></a>Sumary</h2><table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">과거형 동사와 함께 사용</th>
<th style="text-align:center">단독으로 사용</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">의미</td>
<td style="text-align:center">과거의 시점에서 미래에 대한 얘기</td>
<td style="text-align:center">현재와 미래에 대한 얘기</td>
</tr>
<tr>
<td style="text-align:center">Could</td>
<td style="text-align:center">I thought I could make it</td>
<td style="text-align:center">I could make it but…</td>
</tr>
<tr>
<td style="text-align:center">Would</td>
<td style="text-align:center">he told me he would get here on time</td>
<td style="text-align:center">I would help me, if I were you</td>
</tr>
</tbody>
</table>
<h2 id="몸풀기"><a href="#몸풀기" class="headerlink" title="몸풀기"></a>몸풀기</h2><ol>
<li>I couldn’t get up early yesterday</li>
<li>I could get up early yesterday.</li>
</ol>
<p>위의 두 문장 중 2번 문장은 어색하다.</p>
<h2 id="Could-Would의-정체"><a href="#Could-Would의-정체" class="headerlink" title="Could/Would의 정체"></a>Could/Would의 정체</h2><p>Could/Would의 정체는 무엇일까? Can/Will의 과거일까?</p>
<ol>
<li>시제는 동사에 적용한다.</li>
<li><code>Can/Could/Will/Would</code>는 조동사이다.</li>
<li>따라서 Could/Would는 Can/Will의 과거가 아니다!</li>
</ol>
<p>그럼 흔히 생각하는 <strong>~할 수 있었어</strong> 라는 표현을 알아보자.</p>
<ol>
<li><code>was able to</code>: I was able to get up early yesterday.</li>
<li><code>managed to</code>: I managed to get up early yesterday.</li>
</ol>
<p><strong>할수있다/할것이다</strong>의 과거형은 위와같이 표현하면 된다.</p>
<h2 id="Usage-1-과거와-함께-사용"><a href="#Usage-1-과거와-함께-사용" class="headerlink" title="Usage 1. 과거와 함께 사용"></a>Usage 1. 과거와 함께 사용</h2><p>과거 시점에서 바라보는 미래를 표현 함</p>
<blockquote>
<p>I thought It would rain today: 나는 오늘 비가 올 줄 알았어. &lt;- 과거시점(thought)에서 바라보는 미래(today)<br>She promised (that) she wouldn’t talk about that again.<br>I told him (that) I would try my best.<br>They told me they would give an answer by this friday.<br>I thought this would be more expensive.<br>I thought you could help me.<br>I didn’t think I could get here on time.<br>She knew she could pass the test.</p>
</blockquote>
<h3 id="과거-vs-would-비교"><a href="#과거-vs-would-비교" class="headerlink" title="과거 vs would 비교"></a>과거 vs would 비교</h3><p>아래 2가지의 차이가 무엇일까?</p>
<ol>
<li>I thought you would know about that</li>
<li>I thought you knew about that</li>
</ol>
<p>해석을 하면 다음과 같다.</p>
<ol>
<li>나는 니가 그것에 대해 알 줄 알았어.</li>
<li>나는 니가 그걸 알고 있는줄 알았어. (= I thought you already knew about that)</li>
</ol>
<p>즉 1번은 알고 있는지 모르는지에 대한 불확실함을 내포하고, 2번은 이미 알고 있다고 생각을 한것.</p>
<h3 id="영어-vs-한국어-비교"><a href="#영어-vs-한국어-비교" class="headerlink" title="영어 vs 한국어 비교"></a>영어 vs 한국어 비교</h3><p>국어에서는 톤강조를 통해 표현한다.</p>
<ol>
<li>나는 제 시간에 <strong>못할 줄</strong> 알았어</li>
<li>나는 제 시간에 못할 줄 <strong>알았어</strong></li>
</ol>
<p>대응되는 영어는 다음과 같다.</p>
<ol>
<li>I didn’t think I could make it on time.</li>
<li>I knew I couldn’t make it on time.</li>
</ol>
<h2 id="Usage-2-단독으로-사용"><a href="#Usage-2-단독으로-사용" class="headerlink" title="Usage 2. 단독으로 사용"></a>Usage 2. 단독으로 사용</h2><p>It’s uncertain version of Can/Will (<code>~을 (할) 수도 있다.</code>)</p>
<blockquote>
<p>I could marry her, but I think I need to think about it some more.</p>
</blockquote>
<p>현재 혹은 미래의 불확실함을 표현 -&gt; 가정(if)하에 생각하면 확실할 수 있는게 없다.<br>따라서 불확실함을 표현하기에 <code>if</code>와 함께 사용하는 경우가 많다.</p>
<blockquote>
<p>if you were my friend, I would help you</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Would-Could-자연스럽게-사용하기&quot;&gt;&lt;a href=&quot;#Would-Could-자연스럽게-사용하기&quot; class=&quot;headerlink&quot; title=&quot;Would/Could 자연스럽게 사용하기&quot;&gt;&lt;/a&gt;Would/Could 자연스럽게 사용
    
    </summary>
    
    
      <category term="English" scheme="http://khackskjs.github.io/tags/English/"/>
    
      <category term="LiveAcademy" scheme="http://khackskjs.github.io/tags/LiveAcademy/"/>
    
  </entry>
  
  <entry>
    <title>Angular - egghead 01</title>
    <link href="http://khackskjs.github.io/2017/11/28/Angular-egghead-01/"/>
    <id>http://khackskjs.github.io/2017/11/28/Angular-egghead-01/</id>
    <published>2017-11-27T15:18:40.000Z</published>
    <updated>2018-01-06T11:37:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Egg-Head-Angular-Get-Started"><a href="#Egg-Head-Angular-Get-Started" class="headerlink" title="[Egg Head] Angular Get Started"></a>[Egg Head] Angular Get Started</h1><p><a href="https://egghead.io" target="_blank" rel="external">Egg Head</a>의 <strong>Get Started with Angular</strong>를 강의 순서대로 <strong>남겨 둘만한 부분</strong>에 대해서 간단히 정리 해 본다.</p>
<h2 id="2-Create-a-Simple-Angular-2-Component"><a href="#2-Create-a-Simple-Angular-2-Component" class="headerlink" title="2. Create a Simple Angular 2 Component"></a>2. Create a Simple Angular 2 Component</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ng generate component simple-form --inline-template --inline-style</div><div class="line"><span class="comment"># same as</span></div><div class="line">$ ng g c simple-form -it -is</div></pre></td></tr></table></figure>
<p><code>.angular-cli.json</code> file 에 <code>apps.prefix</code> 값이 <strong>selecotr</strong>의 prefix로 동작 함</p>
<h2 id="3-Manage-Angular-2-Elements-with-Events-and-Refs"><a href="#3-Manage-Angular-2-Elements-with-Events-and-Refs" class="headerlink" title="3. Manage Angular 2 Elements with Events and Refs"></a>3. Manage Angular 2 Elements with Events and Refs</h2><h3 id="click-event-amp-input-binding"><a href="#click-event-amp-input-binding" class="headerlink" title="click event &amp; input binding"></a>click event &amp; input binding</h3><p><code>input</code> 으로부터 값을 입력 받아서, <code>click</code> 하면 출력하는 예제를 통해 event binding을 해 본다.</p>
<figure class="highlight ts"><figcaption><span>./src/app/simple-form/simple-form.component.ts</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">  template: <span class="string">`</span></div><div class="line">    &lt;div&gt;</div><div class="line">      &lt;input #myInput type="text"&gt;</div><div class="line">      &lt;button (click)="onClick(myInput.value)"&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  `</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> SimpleFormComponent <span class="keyword">implements</span> OnInit &#123;</div><div class="line">  onClick(value) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'clicked'</span>, value);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>DOM event</code>(<code>click</code>)를 <code>onClick</code> method 와 binding.</li>
<li>#myInput 은 <strong>refs</strong> 라고 하며, Element를 가리키는 듯.<blockquote>
<p><strong>#myInput</strong> 의 정체를 조금 더 알 핖요가 있을 듯</p>
</blockquote>
</li>
</ol>
<p><code>HTML</code>에서 <code>onClick(myInput)</code>으로 value가 아닌 myInput을 전달하게 되면 Element 가 전달된다.</p>
<blockquote>
<p><code>console.log(myInput.value)</code> 한 후 CDT &gt; <strong>console</strong>의 출력에 마우스 오버하면 해당 Element를 하이라이트 해 준다.</p>
</blockquote>
<h2 id="4-Control-Angular-2-Events-with-event-and-Event-Handlers"><a href="#4-Control-Angular-2-Events-with-event-and-Event-Handlers" class="headerlink" title="4. Control Angular 2 Events with $event and Event Handlers"></a>4. Control Angular 2 Events with $event and Event Handlers</h2><p><code>$event</code>를 parameter 로 넘길 수 있다.</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">  template: <span class="string">`&lt;div&gt;</span></div><div class="line">      &lt;input #myInput type="text"&gt;</div><div class="line">      &lt;button (click)="onClick($event, myInput.value)"&gt;BTN&lt;/button&gt;</div><div class="line">    &lt;/div&gt;`</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> SimpleFormComponent <span class="keyword">implements</span> OnInit &#123;</div><div class="line">  onClick(event, value) &#123;</div><div class="line">    <span class="built_in">console</span>.log(event, value);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5-Share-Services-and-Data-with-Angular-2-Dependency-Injection"><a href="#5-Share-Services-and-Data-with-Angular-2-Dependency-Injection" class="headerlink" title="5. Share Services and Data with Angular 2 Dependency Injection"></a>5. Share Services and Data with Angular 2 Dependency Injection</h2><ol>
<li><code>app.module.ts</code>의 providers에 생성한 <code>Service Class</code> 추가<blockquote>
<p>ex) <code>providers: [MailService]</code></p>
</blockquote>
</li>
<li>사용할 <code>Component</code>의 <code>constructor</code>에 추가<blockquote>
<p>ex) <code>constructor(private mailService: MailService) {}</code></p>
</blockquote>
</li>
</ol>
<h2 id="6-Provide-and-Share-Values-with-Angular-2-Dependency-Injection"><a href="#6-Provide-and-Share-Values-with-Angular-2-Dependency-Injection" class="headerlink" title="6. Provide and Share Values with Angular 2 Dependency Injection"></a>6. Provide and Share Values with Angular 2 Dependency Injection</h2><p><code>providers</code>에 <code>object</code>를 통해 이름을 변경해서 <code>DI</code> 해 본다.</p>
<ol>
<li><code>app.module.ts</code>의 providers에 <code>{provide: &#39;이름&#39;, useClass: 서비스_클래스}</code> 또는 <code>{provide: &#39;이름&#39;, useValue: &#39;값&#39;}</code>형태로 주입<blockquote>
<p>ex) <code>{ provide: &#39;mail&#39;, useClass: MailService }</code><br>ex) <code>{ provide: &#39;name&#39;,  useValue: &#39;robert kim&#39; }</code></p>
</blockquote>
</li>
<li>사용할 <code>Component</code>의 <code>constructor</code>에 <code>@Inject</code> 데코레이터와 함께 사용<blockquote>
<p>ex) <code>constructor(@Inject(&#39;mail&#39;) private mail, @Inject(&#39;name&#39;) private name)</code></p>
</blockquote>
</li>
</ol>
<h2 id="7-Loop-Through-Angular-2-Components-with-ngFor"><a href="#7-Loop-Through-Angular-2-Components-with-ngFor" class="headerlink" title="7. Loop Through Angular 2 Components with ngFor"></a>7. Loop Through Angular 2 Components with ngFor</h2><p><code>ngFor</code> 를 사용 해 본다.</p>
<ol>
<li>HTML에서 <code>*ngFor=&quot;let {변수} of {참조}&quot;</code> 형태로 사용</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let message of mail.messages"</span>&gt;</span></div><div class="line">    &#123;&#123; message &#125;&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Angular Compiler는 HTML을 컴파일 하면서 <code>*</code>가 있는 부분은 다시 재생성 하는걸로 보인다.</p>
<h2 id="8-Pass-Values-into-Angular-2-Components-with-Input"><a href="#8-Pass-Values-into-Angular-2-Components-with-Input" class="headerlink" title="8. Pass Values into Angular 2 Components with @Input"></a>8. Pass Values into Angular 2 Components with @Input</h2><p><code>Component</code> 값을 주입하기 위해서는 <code>attribute</code> 형태로 주입하며, <code>@Input</code>을 이용해야 한다.</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Component, OnInit, Input &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">  selector: <span class="string">`di-test`</span>,</div><div class="line">  template: <span class="string">`&#123;&#123; diMessage &#125;&#125;`</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">class</span> DITestComponent <span class="keyword">implements</span> OnInit &#123;</div><div class="line">  <span class="meta">@Input</span>() diMessage;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</div><div class="line">  ngOnInit() &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>line 1</strong>: <code>Input</code> decorator는 <code>@angular/core</code>를 사용한다.</li>
<li><strong>line 5</strong>: <code>diMessage</code>를 interpolation 했다는건, 해당 class의 member 변수라는 의미 일 것이다.</li>
<li><strong>line 8</strong>: <code>diMessage</code>에 <code>@Input</code> decorator 를 붙이므로, <code>Attribute</code>를 통해 값을 받을 수 있다.</li>
</ul>
<p>위의 <code>DITestComponent</code>는 아래와 같이 사용하면 된다.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`<span class="tag">&lt;<span class="name">di-test</span> [<span class="attr">message</span>]=<span class="string">"some message"</span>&gt;</span><span class="tag">&lt;/<span class="name">di-test</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="9-Sync-Values-from-Inputs-with-Angular-2’s-ngModel-Two-Way-Binding"><a href="#9-Sync-Values-from-Inputs-with-Angular-2’s-ngModel-Two-Way-Binding" class="headerlink" title="9. Sync Values from Inputs with Angular 2’s ngModel Two-Way Binding"></a>9. Sync Values from Inputs with Angular 2’s ngModel Two-Way Binding</h2><p><strong>2-way Binding</strong>에 대해 알아본다.</p>
<p>사용법은 <code>HTML</code>에 <code>[(ngModel)]=variable</code> 형태로 <code>ngModel</code> keyword를 통해 변수와 바인딩 한다.</p>
<blockquote>
<p><code>app.module.ts</code>에 <code>FormsModule</code>을 imports 해야 한다.</p>
</blockquote>
<h2 id="10-Pass-Events-from-Angular-2-Components-with-Output"><a href="#10-Pass-Events-from-Angular-2-Components-with-Output" class="headerlink" title="10. Pass Events from Angular 2 Components with @Output"></a>10. Pass Events from Angular 2 Components with @Output</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Egg-Head-Angular-Get-Started&quot;&gt;&lt;a href=&quot;#Egg-Head-Angular-Get-Started&quot; class=&quot;headerlink&quot; title=&quot;[Egg Head] Angular Get Started&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="angular" scheme="http://khackskjs.github.io/categories/angular/"/>
    
    
      <category term="angular" scheme="http://khackskjs.github.io/tags/angular/"/>
    
      <category term="egghead" scheme="http://khackskjs.github.io/tags/egghead/"/>
    
  </entry>
  
  <entry>
    <title>normalize example</title>
    <link href="http://khackskjs.github.io/2017/11/26/normalize-example/"/>
    <id>http://khackskjs.github.io/2017/11/26/normalize-example/</id>
    <published>2017-11-25T22:43:12.000Z</published>
    <updated>2017-12-03T15:03:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Normalizr"><a href="#Normalizr" class="headerlink" title="Normalizr"></a>Normalizr</h1><p><code>narmalizr</code> 사용법을 익혀 본다.</p>
<h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><!-- TOC -->
<ul>
<li><a href="#normalizr">Normalizr</a><ul>
<li><a href="#목차">목차</a></li>
<li><a href="#definition">Definition</a><ul>
<li><a href="#motivation">Motivation</a></li>
<li><a href="#solution">Solution</a></li>
</ul>
</li>
<li><a href="#execution-of-normalizr">Execution of normalizr</a><ul>
<li><a href="#environment">Environment</a><ul>
<li><a href="#project-init">Project init</a></li>
<li><a href="#babel--normalizr-setting">babel &amp; normalizr setting</a></li>
</ul>
</li>
<li><a href="#coding">Coding</a></li>
<li><a href="#run">Run</a></li>
<li><a href="#result">Result</a></li>
</ul>
</li>
<li><a href="#into-the-normalizr">Into the Normalizr</a><ul>
<li><a href="#normalize-function">normalize function</a><ul>
<li><a href="#example-of-normalize-function">example of normalize function</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#dive-into-the-normalizr">Dive into the normalizr</a></li>
<li><a href="#references">references</a></li>
</ul>
</li>
</ul>
<!-- /TOC -->
<h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>normalize: 표준화/일반화 하다.</p>
<p>어디선가 본 가장 와닿는 정의는 다음과 같다.<br> : a way of cleaning up JSON data consisting of many deeply nested objects</p>
<blockquote>
<p>깊게 중첩된 오브젝트로 구성된 JSON 데이터를 정리하는 방법</p>
</blockquote>
<p><a href="https://github.com/paularmstrong/normalizr#normalizr----" target="_blank" rel="external">normalizr</a>란 <strong>Motivation</strong>과 <strong>Solution</strong>을 살펴보면 알 수 있듯이, 복잡한 JSON Object를 정규화 하기 위한 Library 정도 되겠다.</p>
<h3 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h3><p>Many APIs, public or not, return JSON data that has deeply nested objects. Using data in this kind of structure is often very difficult for JavaScript applications, especially those using Flux or Redux.</p>
<blockquote>
<p>많은 <code>API</code>들은 중첩된 객체 형태의 <code>JSON</code>을 return 한다. 이런 구조의 데이터를 사용하는 것은 <code>javascript applications</code>, 특히 <code>Flux</code> 또는 <code>Redux</code>를 사용 하기 어렵다.</p>
</blockquote>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Normalizr is a small, but powerful utility for taking JSON with a schema definition and returning nested entities with their IDs, gathered in dictionaries.</p>
<blockquote>
<p>Normalizr은 <code>JSON</code>을 스키마 정의로 사용하고, <code>Dictionary</code>에 저장된 ID로 중첩 된 항목을 반환하는 작지만 강력한 유틸리티.</p>
</blockquote>
<h2 id="Execution-of-normalizr"><a href="#Execution-of-normalizr" class="headerlink" title="Execution of normalizr"></a>Execution of normalizr</h2><p>이론을 글로 읽는 것 보다는 실행 전/후를 살펴보는게 훨씬 빠르게 이해 할 수 있을 것이다. ㄱㄱㅆ</p>
<p><a href="https://github.com/paularmstrong/normalizr/tree/master/examples/relationships" target="_blank" rel="external">normalizr (github, paularmstrong)</a> 예제를 테스트하기 편하게 재작성 해 보았다.</p>
<h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h3><p><code>ECMAScript Module(ESM)</code>을 사용하고 있어, node.js 는 기본적으로 <code>CommonJS</code> Module loading을 사용하기 때문에 <code>babel</code>을 사용해서 실행한다.<br><del>node.js v8.9.1의 –experimental-modules flag 사용을 해 보려고 했으나, 결국 실패해서 포스팅 재작성</del></p>
<h4 id="Project-init"><a href="#Project-init" class="headerlink" title="Project init"></a>Project init</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; mkdir normalizr_khackskjs</div><div class="line">&gt; <span class="built_in">cd</span> normalizr_khackskjs</div><div class="line">&gt; npm init -y</div><div class="line">&gt; npm i --save normalizr</div></pre></td></tr></table></figure>
<h4 id="babel-amp-normalizr-setting"><a href="#babel-amp-normalizr-setting" class="headerlink" title="babel &amp; normalizr setting"></a>babel &amp; normalizr setting</h4><p><a href="https://www.npmjs.com/package/@babel/node" target="_blank" rel="external">@babel/node</a>를 통해서 <code>ESM</code>을 tranpile과 동시에 실행하도록 한다.</p>
<ol>
<li>babel-cli를 설치</li>
<li>@babel/core, @babel/node 설치</li>
<li>transpile presets 설치</li>
<li>normalizr module 설치</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; npm i -g babel-cli</div><div class="line">&gt; npm i --save-dev @babel/core @babel/node</div><div class="line">&gt; npm i --save-dev babel-preset-es2015 babel-preset-stage-1</div><div class="line">&gt; npm i --save normalizr</div></pre></td></tr></table></figure>
<p><code>.babelrc</code> file을 생성 한 후 tranpile 시 preset options을 지정한다.</p>
<figure class="highlight json"><figcaption><span>./.babelrc</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"presets"</span>: [<span class="string">"es2015"</span>, <span class="string">"stage-1"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h3><p>input.json 파일을 읽어서, normalize 한 후 output.json file에 쓰는 예제이다.</p>
<p>아래 <code>input.json</code>, <code>schema.js</code>, <code>input.js</code> source를 그대로 붙여넣어 파일을 생성한다.</p>
<figure class="highlight json"><figcaption><span>./input.json</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">[&#123;</div><div class="line">    <span class="attr">"id"</span>: <span class="string">"1"</span>,</div><div class="line">    <span class="attr">"title"</span>: <span class="string">"My first post!"</span>,</div><div class="line">    <span class="attr">"author"</span>: &#123;</div><div class="line">      <span class="attr">"id"</span>: <span class="string">"123"</span>,</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"Paul"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"comments"</span>: [&#123;</div><div class="line">        <span class="attr">"id"</span>: <span class="string">"249"</span>,</div><div class="line">        <span class="attr">"content"</span>: <span class="string">"Nice post!"</span>,</div><div class="line">        <span class="attr">"commenter"</span>: &#123;</div><div class="line">          <span class="attr">"id"</span>: <span class="string">"245"</span>,</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"Jane"</span></div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"id"</span>: <span class="string">"250"</span>,</div><div class="line">        <span class="attr">"content"</span>: <span class="string">"Thanks!"</span>,</div><div class="line">        <span class="attr">"commenter"</span>: &#123;</div><div class="line">          <span class="attr">"id"</span>: <span class="string">"123"</span>,</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"Paul"</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="attr">"id"</span>: <span class="string">"2"</span>,</div><div class="line">    <span class="attr">"title"</span>: <span class="string">"This other post"</span>,</div><div class="line">    <span class="attr">"author"</span>: &#123;</div><div class="line">      <span class="attr">"id"</span>: <span class="string">"123"</span>,</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"Paul"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"comments"</span>: [&#123;</div><div class="line">        <span class="attr">"id"</span>: <span class="string">"251"</span>,</div><div class="line">        <span class="attr">"content"</span>: <span class="string">"Your other post was nicer"</span>,</div><div class="line">        <span class="attr">"commenter"</span>: &#123;</div><div class="line">          <span class="attr">"id"</span>: <span class="string">"245"</span>,</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"Jane"</span></div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"id"</span>: <span class="string">"252"</span>,</div><div class="line">        <span class="attr">"content"</span>: <span class="string">"I am a spammer!"</span>,</div><div class="line">        <span class="attr">"commenter"</span>: &#123;</div><div class="line">          <span class="attr">"id"</span>: <span class="string">"246"</span>,</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"Spambot5000"</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>./schema.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; schema &#125; <span class="keyword">from</span> <span class="string">'normalizr'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> userProcessStrategy = <span class="function">(<span class="params">value, parent, key</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">switch</span> (key) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'author'</span>:</div><div class="line">      <span class="keyword">return</span> &#123; ...value, <span class="attr">posts</span>: [ parent.id ] &#125;;</div><div class="line">    <span class="keyword">case</span> <span class="string">'commenter'</span>:</div><div class="line">      <span class="keyword">return</span> &#123; ...value, <span class="attr">comments</span>: [ parent.id ] &#125;;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      <span class="keyword">return</span> &#123; ...value &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> userMergeStrategy = <span class="function">(<span class="params">entityA, entityB</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    ...entityA,</div><div class="line">    ...entityB,</div><div class="line">    <span class="attr">posts</span>: [ ...(entityA.posts || []), ...(entityB.posts || []) ],</div><div class="line">    <span class="attr">comments</span>: [ ...(entityA.comments || []), ...(entityB.comments || []) ]</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> schema.Entity(<span class="string">'users'</span>, &#123;&#125;, &#123;</div><div class="line">  <span class="attr">mergeStrategy</span>: userMergeStrategy,</div><div class="line">  <span class="attr">processStrategy</span>: userProcessStrategy</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">const</span> comment = <span class="keyword">new</span> schema.Entity(<span class="string">'comments'</span>, &#123;</div><div class="line">  <span class="attr">commenter</span>: user</div><div class="line">&#125;, &#123;</div><div class="line">  <span class="attr">processStrategy</span>: <span class="function">(<span class="params">value, parent, key</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> &#123; ...value, <span class="attr">post</span>: parent.id &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">const</span> post = <span class="keyword">new</span> schema.Entity(<span class="string">'posts'</span>, &#123;</div><div class="line">  <span class="attr">author</span>: user,</div><div class="line">  <span class="attr">comments</span>: [ comment ]</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> [ post ];</div></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>./index.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> input <span class="keyword">from</span> <span class="string">'./input.json'</span>;</div><div class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">'fs'</span>;</div><div class="line"><span class="keyword">import</span> &#123; normalize &#125; <span class="keyword">from</span> <span class="string">'normalizr'</span>;</div><div class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">'path'</span>;</div><div class="line"><span class="keyword">import</span> postsSchema <span class="keyword">from</span> <span class="string">'./schema'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> normalizedData = normalize(input, postsSchema);</div><div class="line"><span class="keyword">const</span> output = <span class="built_in">JSON</span>.stringify(normalizedData, <span class="literal">null</span>, <span class="number">2</span>);</div><div class="line">fs.writeFileSync(path.resolve(__dirname, <span class="string">'./output.json'</span>), output);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'./output.json has been created'</span>);</div></pre></td></tr></table></figure>
<h3 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; babel-node index.js</div></pre></td></tr></table></figure>
<h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><p><code>output.json</code> 파일이 생성되며, 결과는 다음과 같다.</p>
<figure class="highlight json"><figcaption><span>./output.json</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"entities"</span>: &#123;</div><div class="line">    <span class="attr">"users"</span>: &#123;</div><div class="line">      <span class="attr">"123"</span>: &#123;</div><div class="line">        <span class="attr">"id"</span>: <span class="string">"123"</span>,</div><div class="line">        <span class="attr">"name"</span>: <span class="string">"Paul"</span>,</div><div class="line">        <span class="attr">"posts"</span>: [</div><div class="line">          <span class="string">"1"</span>,</div><div class="line">          <span class="string">"2"</span></div><div class="line">        ],</div><div class="line">        <span class="attr">"comments"</span>: [</div><div class="line">          <span class="string">"250"</span></div><div class="line">        ]</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"245"</span>: &#123;</div><div class="line">        <span class="attr">"id"</span>: <span class="string">"245"</span>,</div><div class="line">        <span class="attr">"name"</span>: <span class="string">"Jane"</span>,</div><div class="line">        <span class="attr">"comments"</span>: [</div><div class="line">          <span class="string">"249"</span>,</div><div class="line">          <span class="string">"251"</span></div><div class="line">        ],</div><div class="line">        <span class="attr">"posts"</span>: []</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"246"</span>: &#123;</div><div class="line">        <span class="attr">"id"</span>: <span class="string">"246"</span>,</div><div class="line">        <span class="attr">"name"</span>: <span class="string">"Spambot5000"</span>,</div><div class="line">        <span class="attr">"comments"</span>: [</div><div class="line">          <span class="string">"252"</span></div><div class="line">        ]</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"comments"</span>: &#123;</div><div class="line">      <span class="attr">"249"</span>: &#123;</div><div class="line">        <span class="attr">"id"</span>: <span class="string">"249"</span>,</div><div class="line">        <span class="attr">"content"</span>: <span class="string">"Nice post!"</span>,</div><div class="line">        <span class="attr">"commenter"</span>: <span class="string">"245"</span>,</div><div class="line">        <span class="attr">"post"</span>: <span class="string">"1"</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"250"</span>: &#123;</div><div class="line">        <span class="attr">"id"</span>: <span class="string">"250"</span>,</div><div class="line">        <span class="attr">"content"</span>: <span class="string">"Thanks!"</span>,</div><div class="line">        <span class="attr">"commenter"</span>: <span class="string">"123"</span>,</div><div class="line">        <span class="attr">"post"</span>: <span class="string">"1"</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"251"</span>: &#123;</div><div class="line">        <span class="attr">"id"</span>: <span class="string">"251"</span>,</div><div class="line">        <span class="attr">"content"</span>: <span class="string">"Your other post was nicer"</span>,</div><div class="line">        <span class="attr">"commenter"</span>: <span class="string">"245"</span>,</div><div class="line">        <span class="attr">"post"</span>: <span class="string">"2"</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"252"</span>: &#123;</div><div class="line">        <span class="attr">"id"</span>: <span class="string">"252"</span>,</div><div class="line">        <span class="attr">"content"</span>: <span class="string">"I am a spammer!"</span>,</div><div class="line">        <span class="attr">"commenter"</span>: <span class="string">"246"</span>,</div><div class="line">        <span class="attr">"post"</span>: <span class="string">"2"</span></div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"posts"</span>: &#123;</div><div class="line">      <span class="attr">"1"</span>: &#123;</div><div class="line">        <span class="attr">"id"</span>: <span class="string">"1"</span>,</div><div class="line">        <span class="attr">"title"</span>: <span class="string">"My first post!"</span>,</div><div class="line">        <span class="attr">"author"</span>: <span class="string">"123"</span>,</div><div class="line">        <span class="attr">"comments"</span>: [</div><div class="line">          <span class="string">"249"</span>,</div><div class="line">          <span class="string">"250"</span></div><div class="line">        ]</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"2"</span>: &#123;</div><div class="line">        <span class="attr">"id"</span>: <span class="string">"2"</span>,</div><div class="line">        <span class="attr">"title"</span>: <span class="string">"This other post"</span>,</div><div class="line">        <span class="attr">"author"</span>: <span class="string">"123"</span>,</div><div class="line">        <span class="attr">"comments"</span>: [</div><div class="line">          <span class="string">"251"</span>,</div><div class="line">          <span class="string">"252"</span></div><div class="line">        ]</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"result"</span>: [</div><div class="line">    <span class="string">"1"</span>,</div><div class="line">    <span class="string">"2"</span></div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Into-the-Normalizr"><a href="#Into-the-Normalizr" class="headerlink" title="Into the Normalizr"></a>Into the Normalizr</h2><p><code>normalizr</code> interface 부분을 간략히 살펴본 후 예제를 통해서 사용법을 익혀본다.</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> schema &#123;</div><div class="line">  <span class="comment">// 중략</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">type</span> Schema = schema.Array | schema.Entity |</div><div class="line">  schema.Object | schema.Union | schema.Values |</div><div class="line">  schema.Array[] | schema.Entity[] | schema.Object[] |</div><div class="line">  schema.Union[] | schema.Values[] | &#123;[key: <span class="built_in">string</span>]: Schema&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">normalize</span>(<span class="params">data: <span class="built_in">any</span>, schema: Schema</span>)</span></div><div class="line">  : &#123; entities: <span class="built_in">any</span>, result: <span class="built_in">any</span> &#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">denormalize</span>(<span class="params">input: <span class="built_in">any</span>, schema: Schema, entities: <span class="built_in">any</span></span>)</span></div><div class="line">  : <span class="title">any</span>;</div></pre></td></tr></table></figure>
<h3 id="normalize-function"><a href="#normalize-function" class="headerlink" title="normalize function"></a>normalize function</h3><p><code>normalize(data: any, schema: Schema): { entities: any, result: any }</code></p>
<blockquote>
<p>Normalizes input data per the schema definition provided.</p>
<ul>
<li>data: required Input JSON (or plain JS object) data that needs normalization.</li>
<li>schema: required A schema definition</li>
</ul>
</blockquote>
<p><a href="https://github.com/paularmstrong/normalizr/blob/master/docs/api.md#normalizedata-schema" target="_blank" rel="external">GitHub</a>에서 <code>normalize function</code>을 위와같이 설명하고 있다. <del>그렇다고 한다-ㅅ-</del></p>
<p><code>normalize function</code>을 사용하기 위해서는 normalize 할 원본 데이터(<code>JSON</code> or plain JS object)와, 해당 원본 데이터의 schema를 정의한 <code>Scmhema</code>를 parameter로 전달해야 한다.</p>
<blockquote>
<p><code>export type Schema =</code>를 이루는 항목들을 보면 알 수 있듯 <code>Schema</code>는 모두 <code>namespace schema</code>를 이용해서 만들어야 한다.<br>그리고 보통 <code>schema.Entity</code>, <code>schema.Array</code> 그리고 <code>{[key: string]: Schema}</code>를 사용 할 것으로 보인다.</p>
</blockquote>
<p>무슨 말인고 하니, input data가 어떻게 이루어져 있는지를 정의하고, 필요에 따라서는 몇가지 옵션을 통해서 Entity를 만져주면 된다.</p>
<h4 id="example-of-normalize-function"><a href="#example-of-normalize-function" class="headerlink" title="example of normalize function"></a>example of normalize function</h4><p>input data의 구조를 분해해서 <code>Entity</code>, <code>Schema</code> 를 작성하면 된다.</p>
<figure class="highlight ts"><figcaption><span>demo/01.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; normalize, schema &#125; <span class="keyword">from</span> <span class="string">'normalizr'</span>;</div><div class="line"><span class="keyword">const</span> input = &#123; books: [&#123; id: <span class="number">1</span>, title: <span class="string">'rework'</span> &#125;, &#123; id: <span class="number">2</span>, title: <span class="string">'대한민국이 묻는다'</span>&#125;] &#125;,</div><div class="line">  book = <span class="keyword">new</span> schema.Entity(<span class="string">'book'</span>),</div><div class="line">  bookSchema = &#123; books: [book] &#125;,</div><div class="line">  normalized = normalize(input, bookSchema);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">require</span>(<span class="string">'util'</span>).inspect(normalized, &#123; depth: <span class="literal">null</span> &#125;));</div></pre></td></tr></table></figure>
<p>우리의 관심사는 book 이라는 Entity에 들어있는 값 들이다.<br>하지만 input data에 book은 books 라는 property에 Array 형태로 존재한다.<br>따라서 이를 정리하면 다음과 같다.</p>
<ol>
<li><p>input data 는 <code>object</code> 형태로 <strong>books</strong>라는 <code>property</code>에 <code>Array</code>를 가지고 있다.</p>
<blockquote>
<p><code>input = { books: [] }</code></p>
</blockquote>
</li>
<li><p>이 <code>Array</code>의 <code>item</code>은 <code>object</code>이며, 이를 <strong>book</strong> 으로 사용 하도록 한다.</p>
<blockquote>
<p><code>book = { id: 1, title: &#39;rework&#39; }</code></p>
</blockquote>
</li>
</ol>
<p>위의 순서에 따라서 정의(line 3, 4) 한 후, <code>normalize function</code>에 전달하면 된다.</p>
<p>결과는 아래와 같다.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123; entities:</div><div class="line">   &#123; book:</div><div class="line">      &#123; '1': &#123; id: 1, title: 'rework' &#125;,</div><div class="line">        '2': &#123; id: 2, title: '대한민국이 묻는다' &#125; &#125; &#125;,</div><div class="line">  result: &#123; books: [ 1, 2 ] &#125; &#125;</div></pre></td></tr></table></figure>
<p>아주 심플한 예제는 이정도에서 마치자.</p>
<h2 id="Dive-into-the-normalizr"><a href="#Dive-into-the-normalizr" class="headerlink" title="Dive into the normalizr"></a>Dive into the normalizr</h2><p>앞서 최초 실행 해 봤던 예제에 대한 분석.</p>
<p>To be continue..</p>
<p>processStrategy(value, parent, key): Strategy to use when pre-processing the entity.<br>    Use this method to add extra data, defaults, and/or completely change the entity before normalization is complete.<br>    Defaults to returning a shallow copy of the input entity.<br>        Note: It is recommended to always return a copy of your input and not modify the original.<br>            The function accepts the following arguments, in order:<br>        value: The input value of the entity.<br>        parent: The parent object of the input array.<br>        key: The key at which the input array appears on the parent object.</p>
<h2 id="references"><a href="#references" class="headerlink" title="references"></a>references</h2><p><a href="https://github.com/paularmstrong/normalizr#normalizr----" target="_blank" rel="external">paularmstrong/normalizr (github)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Normalizr&quot;&gt;&lt;a href=&quot;#Normalizr&quot; class=&quot;headerlink&quot; title=&quot;Normalizr&quot;&gt;&lt;/a&gt;Normalizr&lt;/h1&gt;&lt;p&gt;&lt;code&gt;narmalizr&lt;/code&gt; 사용법을 익혀 본다.&lt;/p&gt;
&lt;h2
    
    </summary>
    
    
      <category term="babel-node" scheme="http://khackskjs.github.io/tags/babel-node/"/>
    
      <category term="babel" scheme="http://khackskjs.github.io/tags/babel/"/>
    
      <category term="normalizr" scheme="http://khackskjs.github.io/tags/normalizr/"/>
    
  </entry>
  
  <entry>
    <title>Angular Restaurant Demo App(Routing, Http)</title>
    <link href="http://khackskjs.github.io/2017/09/02/Angular-Restaurant-Demo-App-Routing-Http/"/>
    <id>http://khackskjs.github.io/2017/09/02/Angular-Restaurant-Demo-App-Routing-Http/</id>
    <published>2017-09-02T12:29:40.000Z</published>
    <updated>2017-09-16T16:15:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Routing</code>과 <code>Http</code> Module을 이용해서 Restaurant App을 만들어 보도록 하자.</p>
<p>사람마다 배우는 스타일이 다를거라고 생각한다. (개인적으로 나는 이론적인 부분을 깊에 파고 들어서 이해를 해야 직성이 풀리는 스타일이다)<br>하지만 개발자라면 대부분 코딩 실습을 통해 본인이 해보지 않으면 안다고 or 공부했다고 생각한게 제대로 한게 아니라는건 동의 하지 않을까 추측해 본다.</p>
<p>이에 Angular의 Routing, Http 를 학습 한 김에 간단한 App을 제작 해 보기로 한다.</p>
<h1 id="Angular-Routing-Http-실습-Restaurant-App"><a href="#Angular-Routing-Http-실습-Restaurant-App" class="headerlink" title="Angular Routing, Http 실습: Restaurant App"></a>Angular Routing, Http 실습: Restaurant App</h1><h2 id="App"><a href="#App" class="headerlink" title="App"></a>App</h2><p>App은 3개의 탭으로 구성되어 있다. Home, Menu Category, About Us<br>각각의 탭은 <code>Route</code>로 구현한다.</p>
<p><strong>Menu Category</strong> 탭에서 메뉴 종류를 선택한 후 메뉴 상세를 볼 수 있다.<br>Menu Category List 및 메뉴 상세는 <code>HTTP</code>를 통해 정적 데이터를 로드한 후 보여준다.</p>
<p>Angular를 얕게 공부 한 후 처음으로 만들어 보기 딱 좋은 App 이라 생각한다.</p>
<h2 id="구조-생성"><a href="#구조-생성" class="headerlink" title="구조 생성"></a>구조 생성</h2><h3 id="Project-생성"><a href="#Project-생성" class="headerlink" title="Project 생성"></a>Project 생성</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ ng new RestaurantDemoApp</div><div class="line">installing ng</div><div class="line">  ...</div><div class="line">Project <span class="string">'RestaurantDemoApp'</span> successfully created.</div><div class="line">$ code ./RestaurantDemoApp</div></pre></td></tr></table></figure>
<h3 id="Component-생성"><a href="#Component-생성" class="headerlink" title="Component 생성"></a>Component 생성</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ng g component Home</div><div class="line">$ ng g component AboutUs</div><div class="line">$ ng g component MenuCategory</div></pre></td></tr></table></figure>
<p><code>src/app/</code>아래에 <code>about-us</code>, <code>home</code>, <code>menu-category</code> folder가 생긴것을 확인 할 수 있다.<br><code>src/app/app.module.ts</code>를 확인 해 보면 아래와 같은 내용이 추가 된 것을 확인 할 수 있다.</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; AboutUsComponent &#125; <span class="keyword">from</span> <span class="string">'./about-us/about-us.component'</span>;</div><div class="line"><span class="keyword">import</span> &#123; HomeComponent &#125; <span class="keyword">from</span> <span class="string">'./home/home.component'</span>;</div><div class="line"><span class="keyword">import</span> &#123; MenuCategoryComponent &#125; <span class="keyword">from</span> <span class="string">'./menu-category/menu-category.component'</span>;</div><div class="line"></div><div class="line"><span class="meta">@NgModule</span>(&#123;</div><div class="line">  declarations: [</div><div class="line">    AppComponent,</div><div class="line">    AboutUsComponent,</div><div class="line">    HomeComponent,</div><div class="line">    MenuCategoryComponent,</div><div class="line">  ],</div></pre></td></tr></table></figure>
<h3 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h3><h4 id="Router-Module-App에-추가"><a href="#Router-Module-App에-추가" class="headerlink" title="Router Module App에 추가"></a>Router Module App에 추가</h4><figure class="highlight ts"><figcaption><span>app.module.ts</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; RouterModule, Routes &#125; <span class="keyword">from</span> <span class="string">"@angular/router"</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> restaurantRoutes: Routes = [</div><div class="line">  &#123; path: <span class="string">'home'</span>, component: HomeComponent &#125;,</div><div class="line">  &#123; path: <span class="string">'aboutUs'</span>, component: AboutUsComponent &#125;,</div><div class="line">  &#123; path: <span class="string">'menu-category'</span>, component: MenuCategoryComponent &#125;</div><div class="line">];</div><div class="line"></div><div class="line"><span class="meta">@NgModule</span>(&#123;</div><div class="line">  imports: [</div><div class="line">    RouterModule.forRoot(restaurantRoutes)</div><div class="line">  ]</div></pre></td></tr></table></figure>
<p><strong>1 Line</strong>: Router를 사용하기 위한 모듈들을 import<br><strong>3~7 Lines</strong>: Restaurant App에서 사용할 route path와 그에따른 component 지정<br><strong>12 Line</strong>: Router를 생성하는 public static method를 이용해서 Router를 생성한다.</p>
<p>이제 우리 앱에서 라우터를 사용 할 수 있다.</p>
<p>간단히 Text 형태로 <code>Routing</code> 을 구현하도록 하겠다.</p>
<h4 id="Navigation-만들기"><a href="#Navigation-만들기" class="headerlink" title="Navigation 만들기"></a>Navigation 만들기</h4><figure class="highlight html"><figcaption><span>app.component.html</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"['/home']"</span>&gt;</span>HOME<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"['/menu-category']"</span>&gt;</span>MENU CATEGORY<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"['/aboutUs']"</span>&gt;</span>ABOUT US<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">router-outlet</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>ng new {project name}</code>에 의해 생성되는 기본 <code>Component</code>인 app.component의 기존 코드는 모두 제거하고, 위의 코드를 넣는다.</p>
<p><strong>2 Line</strong>: <strong>one-time binding</strong>을 위해 <code>[]</code>로 감싼 <code>[routerLink]</code>에 <code>RouterModule.forRoot()</code>에 파라미터로 전달한 주소중 하나인 <code>home</code>을 넘긴다.<br><code>routerLink</code>에 할당하는 값은 <code>string Array</code>이다. (2번째 인자값은 parameter)</p>
<p><code>Home</code>, <code>MenuCategory</code>, <code>AboutUs</code>는  <code>ng</code>를 이용해 <code>Component</code>를 만들었기 때문에, 각 <strong>Component.html</strong> 파일에 <code>&lt;p&gt;about-us works!&lt;/p&gt;</code> 다음과 같이 작성이 되어 있다.</p>
<p>이제 실행을 시킨 후 웹 브라우저로 확인하면 Routing 된 페이지를 확인 할 수 있다.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ ng serve</div><div class="line">** NG Live Development Server is listening on localhost:4200, open your browser on http://localhost:4200 **</div><div class="line"><span class="comment">#(중략)</span></div><div class="line">webpack: Compiled successfully.</div></pre></td></tr></table></figure>
<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>HTTP Module 사용은 조금 더 복잡한 면이 있어서, 이번 예제에서는 Data Model 객체는 사용하지 않는다.</p>
<h4 id="HTTP-Module-App에-추가"><a href="#HTTP-Module-App에-추가" class="headerlink" title="HTTP Module App에 추가"></a>HTTP Module App에 추가</h4><figure class="highlight ts"><figcaption><span>app.module.ts</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; HttpModule, Http &#125; <span class="keyword">from</span> <span class="string">"@angular/http"</span>;</div><div class="line"></div><div class="line"><span class="meta">@NgModule</span>(&#123;</div><div class="line">  imports: [</div><div class="line">    HttpModule</div><div class="line">  ]</div></pre></td></tr></table></figure>
<h4 id="Service-만들기"><a href="#Service-만들기" class="headerlink" title="Service 만들기"></a>Service 만들기</h4><p><code>HTTP</code>를 사용해서 Data를 처리할 <code>Service</code>를 만들고, <code>NgModule.providers</code>에 등록한다.</p>
<figure class="highlight ts"><figcaption><span>src/app/menu-category/menu-category.service.ts</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">"@angular/core"</span>;</div><div class="line"><span class="keyword">import</span> &#123; Http &#125; <span class="keyword">from</span> <span class="string">"@angular/http"</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs/Observable'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/map'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> CATEGORY_MENU_URL = <span class="string">"https://khackskjs-course5.herokuapp.com/categories.json"</span>;</div><div class="line"></div><div class="line"><span class="meta">@Injectable</span>()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> CategoryService &#123;</div><div class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> http: Http</span>) &#123;&#125;</div><div class="line"></div><div class="line">    getCategories(): Observable&lt;<span class="built_in">any</span>&gt; &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.http.get(CATEGORY_MENU_URL)</div><div class="line">        .map(<span class="function"><span class="params">response</span> =&gt;</span> response.json());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight ts"><figcaption><span>src/app/app.module.ts</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; CategoryService &#125; <span class="keyword">from</span> <span class="string">'./menu-category/menu-category.service'</span>;</div><div class="line"></div><div class="line"><span class="meta">@NgModule</span>(&#123;</div><div class="line">  providers: [CategoryService]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="Component-만들기"><a href="#Component-만들기" class="headerlink" title="Component 만들기"></a>Component 만들기</h4><p>Data를 가져오는 <code>Service</code>를 만들었다면, 이제 <code>Service</code>를 사용하는 <code>Component</code>를 만든다.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ng g component menuCategory</div></pre></td></tr></table></figure>
<figure class="highlight ts"><figcaption><span>src/app/menu-category/menu-category.component.ts</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123; CategoryService &#125; <span class="keyword">from</span> <span class="string">"./menu-category.service"</span>;</div><div class="line"></div><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">  selector: <span class="string">'app-menu-category'</span>,</div><div class="line">  templateUrl: <span class="string">'./menu-category.component.html'</span>,</div><div class="line">  styleUrls: [<span class="string">'./menu-category.component.css'</span>]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> MenuCategoryComponent <span class="keyword">implements</span> OnInit &#123;</div><div class="line">  categoryList: <span class="built_in">any</span>[];</div><div class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> categoryService: CategoryService</span>) &#123;&#125;</div><div class="line"></div><div class="line">  ngOnInit() &#123;</div><div class="line">    <span class="keyword">this</span>.categoryService.getCategories()</div><div class="line">    .subscribe(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">this</span>.categoryList = res;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><figcaption><span>src/app/menu-category/menu-category.component.html</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>Category Name<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span> *<span class="attr">ngFor</span>=<span class="string">"let category of categoryList"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span> &#123;&#123; category.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h3><p><code>Router</code>와 <code>Http</code>를 사용해서 간단한 web App을 구현 해 봤다.</p>
<p><code>Router</code>와 <code>Http</code>를 사용하기 위해서 어떤 일련의 과정을 해야 하는지를 중점적으로 보기 바란다.</p>
<p><img src="https://angular.io/tutorial/toh-pt6#add-the-ability-to-search-by-name" alt="Http Obserable"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Routing&lt;/code&gt;과 &lt;code&gt;Http&lt;/code&gt; Module을 이용해서 Restaurant App을 만들어 보도록 하자.&lt;/p&gt;
&lt;p&gt;사람마다 배우는 스타일이 다를거라고 생각한다. (개인적으로 나는 이론적인 부분을 깊에 파
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Angular Get Started</title>
    <link href="http://khackskjs.github.io/2017/08/26/Angular-Get-Started/"/>
    <id>http://khackskjs.github.io/2017/08/26/Angular-Get-Started/</id>
    <published>2017-08-25T20:12:34.000Z</published>
    <updated>2017-08-27T14:06:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Angular-Get-Started-angular-cli"><a href="#Angular-Get-Started-angular-cli" class="headerlink" title="Angular Get Started(angular/cli)"></a>Angular Get Started(angular/cli)</h1><p><code>Angular.js</code>는 이름 그대로 <code>javascript</code>전용 framework이다. <strong>version 2</strong>로 업그레이드 하면서 이름을 <code>Angular</code>로 명명했다. <strong>js</strong>를 떼어냈다는 의미는 <code>javascript</code>전용은 아니라는 의미로 받아들이면 되며, <code>typescript</code>를 사용 할 것을 권장한다.</p>
<blockquote>
<p>typescript 를 사용해서 결국은 javascript로 tranpiling 한다.</p>
</blockquote>
<h2 id="angular-cli"><a href="#angular-cli" class="headerlink" title="angular/cli"></a>angular/cli</h2><p>Angular에서는 <a href="https://github.com/angular/angular-cli" target="_blank" rel="external">angular/cli</a> 라는 <code>CLI Tool</code>을 지원하고 있다.<br>요즘 대부분의 웹 관련 모듈들이 그러하듯 npm(  참조)을 통해서 설치할 수 있다.</p>
<p>우선 typescript를 설치한다.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -g typescript</div></pre></td></tr></table></figure>
<p>그 후 angular/cli를 설치한다.</p>
<blockquote>
<p>Old version<br>angular/cli 가 @angular/cli package로 통합되었다.<br><code>npm list -g angular-cli</code> 통해 구버전 angular-cli가 설치되어 있을 경우, <a href="https://github.com/angular/angular-cli/wiki/stories-1.0-update#angularcli" target="_blank" rel="external">업데이트 가이드</a>를 따르기 바란다.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; npm i -g @angular/cli</div></pre></td></tr></table></figure>
<p>angular/cli가 설치되며, <strong>CLI</strong>에서 <code>ng</code> 명령어를 통해 여러가지 코드를 자동으로 생성 해 준다.</p>
<h3 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h3><p>간단한 <code>ng</code> command 몇가지를 소개하고, 그 아래에 hello world를 띄우기 위한 설명을 적겠다.</p>
<h4 id="help-menu"><a href="#help-menu" class="headerlink" title="help menu"></a>help menu</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ng --<span class="built_in">help</span></div></pre></td></tr></table></figure>
<p>다른 CLI 명령어들에 비해 비교적 상세한 설명이 나온다.</p>
<h4 id="New-Project"><a href="#New-Project" class="headerlink" title="New Project"></a>New Project</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ng new &#123;project name&#125;</div></pre></td></tr></table></figure>
<h4 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ng serve</div></pre></td></tr></table></figure>
<h4 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ng generate component &#123;Component-Name&#125;</div></pre></td></tr></table></figure>
<p>보통은 <code>http://localhost:4200</code>으로 접속 할 수 있다.</p>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>오늘의 개발환경은 MAC OS 되겠다.</p>
<blockquote>
<p>Let’s just Follow me.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ ng new HelloWorld</div><div class="line">installing ng</div><div class="line">...</div><div class="line">Installing packages <span class="keyword">for</span> tooling via npm.</div><div class="line">Installed packages <span class="keyword">for</span> tooling via npm.</div><div class="line">Successfully initialized git.</div><div class="line">Project <span class="string">'HelloWorld'</span> successfully created.</div></pre></td></tr></table></figure>
<p><strong>Installing packages for tooling via npm.</strong> 이 작업에 시간이 꽤 걸린다.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> HelloWorld/</div><div class="line">$ code .</div></pre></td></tr></table></figure>
<p>한동안 Javascript Editor로는  <strong>Visual Studio Code</strong>(<code>VS Code</code>)를 사용할 예정이다.<br><code>Bracket</code>을 거쳐서 결국은 VS Code의 여러가지 장점(node.js Debugging, CLI, Extentions 등)에 힘입어 정착했다.</p>
<p><code>code .</code>을 입력하게 되면 해당 path를 기준으로 VS Code를 실행시킨다.</p>
<p><img src="Angular_GetStarted_VSCode_01.png" alt="VS Code로 Hello World App 편집화면"></p>
<p>우하단에 terminal이 위치하며 단축키는 <code>ctrl</code>+<code>` </code>(backtick)이다.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ ng serve</div><div class="line">Your global Angular CLI version (1.3.2) is greater than your <span class="built_in">local</span></div><div class="line">version (1.3.1). The <span class="built_in">local</span> Angular CLI version is used.</div><div class="line"></div><div class="line">To <span class="built_in">disable</span> this warning use <span class="string">"ng set --global warnings.versionMismatch=false"</span>.</div><div class="line">** NG Live Development Server is listening on localhost:4200, open your browser on http://localhost:4200 **</div><div class="line">Date: 2017-08-27T12:52:26.771Z</div><div class="line">Hash: 2a33cad17c6b721c814b</div><div class="line">Time: 16822ms</div><div class="line">chunk &#123;inline&#125; inline.bundle.js, inline.bundle.js.map (inline) 5.83 kB [entry] [rendered]</div><div class="line">chunk &#123;main&#125; main.bundle.js, main.bundle.js.map (main) 8.44 kB &#123;vendor&#125; [initial] [rendered]</div><div class="line">chunk &#123;polyfills&#125; polyfills.bundle.js, polyfills.bundle.js.map (polyfills) 209 kB &#123;inline&#125; [initial] [rendered]</div><div class="line">chunk &#123;styles&#125; styles.bundle.js, styles.bundle.js.map (styles) 11.3 kB &#123;inline&#125; [initial] [rendered]</div><div class="line">chunk &#123;vendor&#125; vendor.bundle.js, vendor.bundle.js.map (vendor) 2.27 MB [initial] [rendered]</div><div class="line"></div><div class="line">webpack: Compiled successfully.</div></pre></td></tr></table></figure>
<p>위의 초록색 <strong>warning</strong>은 <code>npm i -g typescript</code>명령을 통해 global로 설치한 <code>typescript</code>가 <strong>ng tool</strong>의 dependency에 의해 설치된 <code>typescript</code>보다 버전이 높아서 그렇다.<br>나중에 살포시 <code>ng set --global warnings.versionMismatch=false</code>를 입력 해 주면 된다.</p>
<p><img src="Angular_GetStarted_VSCode_02.png" alt="최초의 화면 (http://localhost:4200)"></p>
<p>짜잔. 현 버전의 angular/cli를 통해서 타이핑 몇개만 하고 만들어진 화면.<br>하지만.. 이건 내가 Hello world 조차 입력한적이 없으므로 최소한 Hello World 정도는 입력 해 보자.</p>
<figure class="highlight ts"><figcaption><span>src/app/app.module.ts</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">  selector: <span class="string">'app-root'</span>,</div><div class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</div><div class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</div><div class="line">  title = <span class="string">'Rober\'s app'</span>;   <span class="comment">// &lt;- HERE</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ng new HelloWorld</code>를 통해 skefolding 했을 때 우리 앱에 최초로 포함된 <code>Component</code>인 <code>app.component.ts</code>파일의 title을 수정한다.</p>
<p>그리고, <code>templateUrl: &#39;./app.component.html&#39;</code>을 보면 알 수 있듯, 연관된 <code>HTML</code>파일인 <code>app.component.html</code>파일을 수정한다.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--The content below is only a placeholder and can be replaced.--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span></div><div class="line">    Welcome to &#123;&#123;title&#125;&#125;!</div><div class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">src</span>=<span class="string">"data:image/svg+xml;base64,......."</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is my first App<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>    <span class="comment">&lt;!-- HERE --&gt;</span></div></pre></td></tr></table></figure>
<p>(<code>&lt;img&gt;</code> tag 안의 src 부분은 너무 길어서 짜름)<br><code>&lt;/div&gt;</code>아래에 원래 내용을 지우고, 원하는 문구를 넣고, browser를 refresh하면..</p>
<p><img src="Angular_GetStarted_VSCode_03.png" alt="Hello World"></p>
<p>어떻게 돌아가는지 자세한건 다음에 기회가 된다면(음음…..?! 요청하는 분들이 있으시다면..) 하도록 하고, 오늘은 이만.</p>
<p>대략적인 포인트는 아래와 같다.</p>
<ul>
<li>.angular-cli.json 에 main prop에 entry file이 있음</li>
<li>(default) main.ts 이 앱을 bootstrap</li>
<li>bootstrap process가 Angular module 을 활성화(boost) 함</li>
<li>AppModule을 사용해서 앱을 활성화 시킬거고, src/app/app.module.ts 가 AppModule.</li>
<li>AppModule이 어떤 컴포넌트가 top level component가 될지를 정함. (default: AppComponent)</li>
<li>AppComponent는 app-root tag를 사용함</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Angular-Get-Started-angular-cli&quot;&gt;&lt;a href=&quot;#Angular-Get-Started-angular-cli&quot; class=&quot;headerlink&quot; title=&quot;Angular Get Started(angular/cl
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Angular Routing</title>
    <link href="http://khackskjs.github.io/2017/08/19/Angular-Routing/"/>
    <id>http://khackskjs.github.io/2017/08/19/Angular-Routing/</id>
    <published>2017-08-19T08:34:18.000Z</published>
    <updated>2017-08-19T16:04:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Angular-Routing"><a href="#Angular-Routing" class="headerlink" title="Angular Routing"></a>Angular Routing</h1><h2 id="anchor-tag-사용"><a href="#anchor-tag-사용" class="headerlink" title="anchor tag 사용"></a><strong>anchor tag</strong> 사용</h2><p>일반적으로 <strong>Anchor tag</strong>(<code>#</code>) 를 이용해서 웹 페이지 내부 특정 위치로 이동을 정의 한다.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">"about"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>About<span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>이렇게 할 경우, <code>http://server/#about</code> 하게되면 해당 <code>&lt;h2&gt;</code> tag로 이동하게 된다.</p>
<p><code>SPA</code>(Single Page Application) 에서는 <code>http://server/#/about</code>과 같이 사용하며, 이를 <code>hash-based rounting</code>이라 한다.</p>
<h2 id="HTML5-Client-side-Routing"><a href="#HTML5-Client-side-Routing" class="headerlink" title="HTML5 Client-side Routing"></a>HTML5 Client-side Routing</h2><p>HTML5에서 브라우저가 신규 요청없이 URL을 바꿀 수 있게 되었다.<br><code>history.pushState</code> javascript method를 통해서 navigation history 를 접근할 수 있다.</p>
<blockquote>
<p>HTML5 mode Routing</p>
<ol>
<li>older browser 는 지원하지 않음</li>
<li>server에서 HTML5 base routing을 지원해야 함</li>
</ol>
</blockquote>
<h2 id="Angular-에서의-Routing"><a href="#Angular-에서의-Routing" class="headerlink" title="Angular 에서의 Routing"></a>Angular 에서의 Routing</h2><p><strong>Component</strong>와 <strong>path</strong>가 mapping 되도록 개발함</p>
<h2 id="사용법"><a href="#사용법" class="headerlink" title="사용법"></a>사용법</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; RouterModule, Routes &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Angular-Routing&quot;&gt;&lt;a href=&quot;#Angular-Routing&quot; class=&quot;headerlink&quot; title=&quot;Angular Routing&quot;&gt;&lt;/a&gt;Angular Routing&lt;/h1&gt;&lt;h2 id=&quot;anchor-tag-사용
    
    </summary>
    
    
      <category term="Angular" scheme="http://khackskjs.github.io/tags/Angular/"/>
    
      <category term="Routing" scheme="http://khackskjs.github.io/tags/Routing/"/>
    
  </entry>
  
  <entry>
    <title>ASUS(RT-N56U) 간이 NAS 설정 (ext3)</title>
    <link href="http://khackskjs.github.io/2017/08/13/ASUS-Temporary-NAS-External-HDD/"/>
    <id>http://khackskjs.github.io/2017/08/13/ASUS-Temporary-NAS-External-HDD/</id>
    <published>2017-08-13T12:59:55.000Z</published>
    <updated>2017-08-17T15:21:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ASUS-RT-N56U-간이-NAS-설정-ext3"><a href="#ASUS-RT-N56U-간이-NAS-설정-ext3" class="headerlink" title="ASUS(RT-N56U) 간이 NAS 설정 (ext3)"></a>ASUS(RT-N56U) 간이 NAS 설정 (ext3)</h1><p>외장하드를 RT-N56U에 연결한 상태에서 Router의 설정 페이지에서 <strong>USB storage device is not responding</strong> 이란 문구가 뜨면서 <code>Media Server</code>도 설치를 할 수 없는 경우가 있다.<br>이럴 경우 외장하드를 ext3로 format 한 후 설정하면 간이 NAS를 구성 할 수 있다.</p>
<blockquote>
<p>Router 정펌 + ext3 format 외장하드 조합으로 간이 NAS 구성은 완료 했으나, WIFI 신호가 불안정하고, 속도에 문제가 있는 경우가 발생해서 그냥 외장하드 연결을 제거했다. (2017.08.17)<br>RT-N65U merlin firmware 는 없는것으로 보인다. 추후 openWRT firmware를 통해 삽질을 해보고 추가 하도록 하겠다.</p>
</blockquote>
<h2 id="외장하드-ext3-format"><a href="#외장하드-ext3-format" class="headerlink" title="외장하드 ext3 format"></a>외장하드 ext3 format</h2><p>NTFS와 FAT32를 사용하면 약간 느리다는 이야기가 있다(NTFS는 특별히 더).<br>그래서 ext3로 포멧하기로 했고, 이는 MAC에서는 <a href="https://brew.sh/" target="_blank" rel="external"><code>brew</code></a> 를 이용해서 ext3로 포멧 할 수 있다.</p>
<h3 id="brew-설치"><a href="#brew-설치" class="headerlink" title="brew 설치"></a>brew 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ /usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div><div class="line">==&gt; This script will install:</div><div class="line">/usr/<span class="built_in">local</span>/bin/brew</div><div class="line">/usr/<span class="built_in">local</span>/share/doc/homebrew</div><div class="line">/usr/<span class="built_in">local</span>/share/man/man1/brew.1</div><div class="line">/usr/<span class="built_in">local</span>/share/zsh/site-functions/_brew</div><div class="line">/usr/<span class="built_in">local</span>/etc/bash_completion.d/brew</div><div class="line">/usr/<span class="built_in">local</span>/Homebrew</div><div class="line"></div><div class="line">Press RETURN to <span class="built_in">continue</span> or any other key to abort</div><div class="line">==&gt; /usr/bin/sudo /bin/mkdir -p /Library/Caches/Homebrew</div><div class="line">Password:</div></pre></td></tr></table></figure>
<p>install 명령어 입력 후 <strong>Press RETURN to continue or any other key to abort</strong>에서 <code>Enter</code>키를 눌러주고, <strong>Password</strong>ㅔ서 관리자 <code>password</code>를 입력한다.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HEAD is now at e1bab7e Merge pull request <span class="comment">#3050 from Homebrew/revert-3046-double_formula_load_error</span></div></pre></td></tr></table></figure>
<p>이전에 <code>brew</code>를 설치한적이 있다면 위의 문구를 보게 될것이고, 어쨋거나 기다리면 된다. (필자는 마지막이 해당 문구가 <code>load_error</code>로 끝나길래 오류 발생한줄 알았으나, terminal 상단의 제목표시줄이 바뀌는걸 보고 다운받는 중이란걸 알 수 있었다)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ brew install e2fsprogs</div><div class="line">==&gt; Installing dependencies <span class="keyword">for</span> e2fsprogs: gettext</div></pre></td></tr></table></figure>
<h3 id="diskutil-로-disk-Identifier-얻기"><a href="#diskutil-로-disk-Identifier-얻기" class="headerlink" title="diskutil 로 disk Identifier 얻기"></a>diskutil 로 disk Identifier 얻기</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ diskutil list</div><div class="line">/dev/disk0 (internal, physical):</div><div class="line">   <span class="comment">#:                       TYPE NAME                    SIZE       IDENTIFIER</span></div><div class="line">   0:      GUID_partition_scheme                        *750.2 GB   disk0</div><div class="line">   1:                        EFI EFI                     209.7 MB   disk0s1</div><div class="line">   2:                  Apple_HFS Robert<span class="string">'s OS X           749.3 GB   disk0s2</span></div><div class="line">   3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3</div><div class="line"></div><div class="line">/dev/disk1 (external, physical):</div><div class="line">   #:                       TYPE NAME                    SIZE       IDENTIFIER</div><div class="line">   0:      GUID_partition_scheme                        *250.1 GB   disk1</div><div class="line">   1:                        EFI EFI                     209.7 MB   disk1s1</div><div class="line">   2:                  Apple_HFS Robert250G              249.7 GB   disk1s2</div></pre></td></tr></table></figure>
<p>본인이 사용할 HDD는 250G HDD로 ID는 <code>disk1</code>임을 알 수 있다.</p>
<h3 id="ext3-format"><a href="#ext3-format" class="headerlink" title="ext3 format"></a>ext3 format</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo $(brew --prefix e2fsprogs)/sbin/mkfs.ext3 /dev/disk1</div><div class="line">Password:</div><div class="line">mke2fs 1.43.5 (04-Aug-2017)</div><div class="line">/dev/disk1: Resource busy <span class="keyword">while</span> setting up superblock</div></pre></td></tr></table></figure>
<p>위의 마지막 Resource 관련 메시지를 본다면, 해당 disk를 unmount 후 진행하면 된다.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ diskutil unmount disk1s1</div><div class="line">Volume HDD_500 on disk1s1 unmounted</div><div class="line">$ sudo $(brew --prefix e2fsprogs)/sbin/mkfs.ext3 /dev/disk1</div><div class="line">mke2fs 1.43.5 (04-Aug-2017)</div><div class="line">... (중략)</div><div class="line">Writing superblocks and filesystem accounting information: <span class="keyword">done</span></div></pre></td></tr></table></figure>
<h2 id="NAS-설정"><a href="#NAS-설정" class="headerlink" title="NAS 설정"></a>NAS 설정</h2><p>공유기 설정 페이지(default 192.168.1.1)에 접속해서 <code>USB Application</code>에서 필요한 것들(FTP, SAMBA 등)을 설치해서 사용하면 된다.<br>관련 설명은 많이 존재하므로 생략.</p>
<p><img src="usb-applications_01.png" alt="ext3로 포맷한 HDD에 각종 App 설치 전 상태"></p>
<p><img src="usb-applications_02.png" alt="각종 App 설치 후 상태"></p>
<hr>
<p><strong>Reference</strong> site</p>
<ul>
<li><a href="http://event.asus.com/2009/networks/disksupport/" target="_blank" rel="external">ASUS Router 모델별 Disks Compatibility List</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ASUS-RT-N56U-간이-NAS-설정-ext3&quot;&gt;&lt;a href=&quot;#ASUS-RT-N56U-간이-NAS-설정-ext3&quot; class=&quot;headerlink&quot; title=&quot;ASUS(RT-N56U) 간이 NAS 설정 (ext3)&quot;&gt;&lt;/a&gt;AS
    
    </summary>
    
    
      <category term="NAS" scheme="http://khackskjs.github.io/tags/NAS/"/>
    
      <category term="ASUS" scheme="http://khackskjs.github.io/tags/ASUS/"/>
    
      <category term="RT-N56U" scheme="http://khackskjs.github.io/tags/RT-N56U/"/>
    
      <category term="ext3" scheme="http://khackskjs.github.io/tags/ext3/"/>
    
  </entry>
  
  <entry>
    <title>hexo, markdown syntax</title>
    <link href="http://khackskjs.github.io/2017/06/30/hexo-markdown-syntax/"/>
    <id>http://khackskjs.github.io/2017/06/30/hexo-markdown-syntax/</id>
    <published>2017-06-30T14:13:04.000Z</published>
    <updated>2017-08-25T20:48:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="유용한-markdown-문법"><a href="#유용한-markdown-문법" class="headerlink" title="유용한 markdown 문법"></a>유용한 markdown 문법</h1><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 3 backticks</span></div><div class="line"><span class="string">''</span><span class="string">'[language] [title] [url] [link text]</span></div><div class="line">code snippet</div><div class="line">'<span class="string">''</span></div></pre></td></tr></table></figure>
<h2 id="YouTube"><a href="#YouTube" class="headerlink" title="YouTube"></a>YouTube</h2><p>video_id: 유튜브에서 공유를 누른 후 나오는 URL</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% youtube video_id %&#125;</div><div class="line"><span class="comment"># example</span></div><div class="line">&#123;% youtube q8GJh96pNu4 %&#125;</div></pre></td></tr></table></figure>
<h2 id="Insert-Post"><a href="#Insert-Post" class="headerlink" title="Insert Post"></a>Insert Post</h2><p>slug: 포스트 제목. 일자를 제외한 파일 제목.<br>post_path: 해당 포스트의 URL 주소가 표시 됨<br>post_link: 해당 포스트의 링크가 표시 됨</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Path</span></div><div class="line">&#123;% post_path slug %&#125;</div><div class="line"><span class="comment"># Link</span></div><div class="line">&#123;% post_link slug [title] %&#125;</div></pre></td></tr></table></figure>



<h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h2><p>new post 폴더별 설정 후</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">![&#123;description&#125;](&#123;Image path&#125;)</div><div class="line"><span class="comment"># or</span></div><div class="line">&#123;% asset_img Image_path [caption] %&#125;</div><div class="line"></div><div class="line"><span class="comment"># example</span></div><div class="line">![this is my picture](Its_me.jpg)</div><div class="line">&#123;% asset_img IMG_3391.JPG hi %&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;유용한-markdown-문법&quot;&gt;&lt;a href=&quot;#유용한-markdown-문법&quot; class=&quot;headerlink&quot; title=&quot;유용한 markdown 문법&quot;&gt;&lt;/a&gt;유용한 markdown 문법&lt;/h1&gt;&lt;h2 id=&quot;Code&quot;&gt;&lt;a href
    
    </summary>
    
      <category term="blog" scheme="http://khackskjs.github.io/categories/blog/"/>
    
    
      <category term="tip" scheme="http://khackskjs.github.io/tags/tip/"/>
    
  </entry>
  
  <entry>
    <title>블로그 시작 환경 설정 (Hexo, github pages)</title>
    <link href="http://khackskjs.github.io/2017/06/22/Setting-Hexo-github-pages/"/>
    <id>http://khackskjs.github.io/2017/06/22/Setting-Hexo-github-pages/</id>
    <published>2017-06-21T15:05:33.000Z</published>
    <updated>2017-07-28T16:34:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>순서는 크게 아래 3단계</p>
<ol>
<li>hexo 설치 및 정적 페이지 생성</li>
<li>github repository &amp; Disqus ID 생성</li>
<li>github 연동 및 Disqus 설정 후 배포</li>
</ol>
<blockquote>
<p><strong>Let’s just Follow me.</strong></p>
</blockquote>
<p><code>npm</code>이 설치 되어 있지 않으면 <a href="https://nodejs.org/en/download/" target="_blank" rel="external">node.js</a>를 설치하면 <code>npm</code>이 설치된다.</p>
<h2 id="1-hexo-설치-및-정적-페이지-생성"><a href="#1-hexo-설치-및-정적-페이지-생성" class="headerlink" title="1. hexo 설치 및 정적 페이지 생성"></a>1. hexo 설치 및 정적 페이지 생성</h2><h3 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; npm install -g hexo-cli</div></pre></td></tr></table></figure>
<h3 id="hexo-프로젝트-생성-및-dependency-download"><a href="#hexo-프로젝트-생성-및-dependency-download" class="headerlink" title="hexo 프로젝트 생성 및 dependency download"></a>hexo 프로젝트 생성 및 dependency download</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; hexo init <span class="string">"sVeloperBlog"</span></div><div class="line">&gt; <span class="built_in">cd</span> sVeloperBlog</div><div class="line">&gt; npm install</div></pre></td></tr></table></figure>
<h3 id="포스트-파일-생성"><a href="#포스트-파일-생성" class="headerlink" title="포스트 파일 생성"></a>포스트 파일 생성</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; hexo new <span class="string">"first post"</span></div><div class="line"><span class="comment"># or</span></div><div class="line">&gt; hexo n <span class="string">"first post"</span></div></pre></td></tr></table></figure>
<p><code>/source/_post/first-post.md</code> 가 생성됨</p>
<h3 id="예제-포스트"><a href="#예제-포스트" class="headerlink" title="예제 포스트"></a>예제 포스트</h3><figure class="highlight md"><figcaption><span>first-post.md</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="section"># First post</span></div><div class="line"></div><div class="line">It's my first post!</div><div class="line"></div><div class="line"><span class="section">## Introduce myself</span></div><div class="line"></div><div class="line">Hello I'm Robert Kim.</div><div class="line"></div><div class="line"><span class="section">## more..</span></div><div class="line"></div><div class="line">My Hobby List</div><div class="line"></div><div class="line"><span class="bullet">- </span>swimming</div><div class="line"><span class="bullet">- </span>cycling</div><div class="line"><span class="bullet">- </span>watching movie</div><div class="line"><span class="bullet">- </span>etc.</div></pre></td></tr></table></figure>
<h3 id="포스트-확인"><a href="#포스트-확인" class="headerlink" title="포스트 확인"></a>포스트 확인</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; hexo server</div><div class="line"><span class="comment"># or</span></div><div class="line">&gt; hexo s</div></pre></td></tr></table></figure>
<p>일반적으로 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 으로 확인 가능하며, command line output 으로 주소 확인 가능.</p>
<h3 id="정적-페이지-생성"><a href="#정적-페이지-생성" class="headerlink" title="정적 페이지 생성"></a>정적 페이지 생성</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; hexo generate</div><div class="line"><span class="comment"># or</span></div><div class="line">&gt; hexo g</div></pre></td></tr></table></figure>
<p><code>/blog/public/</code>에 실제 호스팅에 사용할 웹 페이지가 생성된다.</p>
<blockquote>
<p><strong>Notice</strong><br>정적 페이지에 변경이 제대로 반영되지 않을 경우 <code>hexo clean</code> 후 <code>hexo generate</code></p>
</blockquote>
<h2 id="2-github-repository-amp-Disqus-ID-생성"><a href="#2-github-repository-amp-Disqus-ID-생성" class="headerlink" title="2. github repository &amp; Disqus ID 생성"></a>2. github repository &amp; Disqus ID 생성</h2><h3 id="github-repository"><a href="#github-repository" class="headerlink" title="github repository"></a>github repository</h3><p><a href="https://github.com/" target="_blank" rel="external">github</a>로 이동 후 가입 &amp; 로그인 한다.</p>
<p>우상단의 <code>New repository</code>를 선택한다.</p>
<p><img src="githubNewRepository01.png" alt=""></p>
<p><code>Repository name</code>에 본인의 {<code>github ID</code>}.github.io 로 입력한 후 <code>Create repository</code>선택.<br><em>(이미 이 블로그가 <code>khackskjs.github.io</code>를 사용하고 있어서 already exists)</em></p>
<p><img src="githubNewRepository02.png" alt=""></p>
<h3 id="Disqus-ID-생성"><a href="#Disqus-ID-생성" class="headerlink" title="Disqus ID 생성"></a>Disqus ID 생성</h3><p>댓글용 <a href="https://disqus.com/profile/signup/" target="_blank" rel="external">Disqus</a>서비스를 사용하기 위해 사이트로 이동 후 가입하거나 지원하는 SNS 연동</p>
<p><img src="disqus_01.png" alt=""><br>이름, 이메일(인증 필요)을 이용해서 가입한다.<br>이 블로그를 위해 khackskjs@gmail.com 계정은 이용중이므로, 다른 도메인 메일을 통해 이미지 캡쳐</p>
<p><img src="disqus_02.png" alt=""><br>코멘트를 이용 할 것이므로 위의 <strong>I want to comment on sites</strong>를 선택한다.</p>
<p><img src="disqus_03.png" alt=""><br>Disqus의 구독 서비스를 이용하라는거 같은데 그냥 스킵하고, 우상단의 유저 아이콘을 선택한다.</p>
<p><img src="disqus_04.png" alt=""><br>계정설정 화면이 나오면 <code>Edit Profile</code>을 선택한다.</p>
<p><img src="disqus_05.png" alt=""><br>계정설정 화면에서 <code>Acount</code>탭에서 <code>Username</code>을 설정한다.<br>disqus service를 통틀어 고유한 이름이어야 하며, 이를통해 hexo와 연동이 가능하다.<br>(<code>hexo</code> <code>_config.yml</code>에서 <code>disqus_shortname</code>에 사용)</p>
<h2 id="3-github-연동-및-Disqus-설정-후-배포"><a href="#3-github-연동-및-Disqus-설정-후-배포" class="headerlink" title="3. github 연동 및 Disqus 설정 후 배포"></a>3. github 연동 및 Disqus 설정 후 배포</h2><p>git에 배포 해주는 플러긴을 설치한다.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; npm i hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>GitHub 계정 및 <code>disqus_shortname</code> 을 입력한다.</p>
<figure class="highlight yml"><figcaption><span>./_config.yml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># URL</span></div><div class="line"><span class="attr">url:</span> <span class="attr">http://&#123;github_id&#125;.github.io/</span></div><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">git</span></div><div class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/&#123;github_id&#125;/&#123;github_id&#125;.github.io</span></div><div class="line"><span class="attr">  branch:</span> <span class="string">master</span></div><div class="line"><span class="comment"># for Disqus</span></div><div class="line"><span class="attr">disqus_shortname:</span> <span class="string">sveloper</span></div></pre></td></tr></table></figure>
<p>이제 설정은 끝났고, 위에서 생성한 페이지 (<code>hexo g</code>)를 배포한다.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; hexo deploy</div><div class="line"><span class="comment"># or</span></div><div class="line">&gt; hexo d</div></pre></td></tr></table></figure>
<p>github로 push가 되었을 것이다.<br><code>_config.yml</code>파일의 <code>url</code>에 입력한 주소(ex: <code>http://khackskjs.github.io/</code>)로 이동하면 블로그가 보일 것이다.<br><strong>(입력은 http, 호스팅은 https)</strong></p>
<hr>
<p>기본적인 사용은 위의 포스팅을 따르면 문제 없을 것이다.<br>(문제가 있다면 댓글 주시면 반영토록 하겠습니다)</p>
<p>좀 더 고급진(?) 사용을 원한다면 아래 링크들을 참조 하길 바란다.</p>
<a href="/2017/06/30/hexo-markdown-syntax/" title="hexo, markdown syntax">hexo, markdown syntax</a>
<blockquote><footer><strong>Tag Plugins</strong><cite><a href="https://hexo.io/docs/tag-plugins.html" target="_blank" rel="external">hexo.io</a></cite></footer></blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;순서는 크게 아래 3단계&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;hexo 설치 및 정적 페이지 생성&lt;/li&gt;
&lt;li&gt;github repository &amp;amp; Disqus ID 생성&lt;/li&gt;
&lt;li&gt;github 연동 및 Disqus 설정 후 배포&lt;/li&gt;
&lt;/o
    
    </summary>
    
      <category term="Blog" scheme="http://khackskjs.github.io/categories/Blog/"/>
    
      <category term="Hexo" scheme="http://khackskjs.github.io/categories/Blog/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://khackskjs.github.io/tags/Hexo/"/>
    
      <category term="Environment" scheme="http://khackskjs.github.io/tags/Environment/"/>
    
      <category term="Follow me" scheme="http://khackskjs.github.io/tags/Follow-me/"/>
    
  </entry>
  
</feed>
