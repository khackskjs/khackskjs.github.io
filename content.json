{"meta":{"title":"sVeloper's","subtitle":"철인 뛰는 개발자","description":"그대여, 너무 걱정하지 말아요. 지나간 것은 지나간대로 그런 의미가 있죠","author":"Robert Kim","url":"http://khackskjs.github.io"},"pages":[],"posts":[{"title":"ASUS 간이 NAS (with 외장하드)","slug":"ASUS-Temporary-NAS-External-HDD","date":"2017-08-13T12:59:55.000Z","updated":"2017-08-17T13:53:00.000Z","comments":true,"path":"2017/08/13/ASUS-Temporary-NAS-External-HDD/","link":"","permalink":"http://khackskjs.github.io/2017/08/13/ASUS-Temporary-NAS-External-HDD/","excerpt":"","text":"ASUS RT-N65U 간이 NAS 사용하기외장하드를 RT-N56U에 연결한 상태에서 Router의 설정 페이지에서 USB storage device is not responding 이란 문구가 뜨면서 Media Server도 설치를 할 수 없는 경우가 있다.이럴 경우 외장하드를 ext3로 format 한 후 설정하면 간이 NAS를 구성 할 수 있다. Router 정펌 + ext3 format 외장하드 조합으로 간이 NAS 구성은 완료 했으나, WIFI 신호가 불안정하고, 속도에 문제가 있는 경우가 발생해서 그냥 외장하드 연결을 제거했다. (2017.08.17)RT-N65U merlin firmware 는 없는것으로 보인다. 추후 openWRT firmware를 통해 삽질을 해보고 추가 하도록 하겠다. 외장하드 ext3 formatNTFS와 FAT32를 사용하면 약간 느리다는 이야기가 있다(NTFS는 특별히 더).그래서 ext3로 포멧하기로 했고, 이는 MAC에서는 brew 를 이용해서 ext3로 포멧 할 수 있다. brew 설치123456789101112$ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"==&gt; This script will install:/usr/local/bin/brew/usr/local/share/doc/homebrew/usr/local/share/man/man1/brew.1/usr/local/share/zsh/site-functions/_brew/usr/local/etc/bash_completion.d/brew/usr/local/HomebrewPress RETURN to continue or any other key to abort==&gt; /usr/bin/sudo /bin/mkdir -p /Library/Caches/HomebrewPassword: install 명령어 입력 후 Press RETURN to continue or any other key to abort에서 Enter키를 눌러주고, Passwordㅔ서 관리자 password를 입력한다. 1HEAD is now at e1bab7e Merge pull request #3050 from Homebrew/revert-3046-double_formula_load_error 이전에 brew를 설치한적이 있다면 위의 문구를 보게 될것이고, 어쨋거나 기다리면 된다. (필자는 마지막이 해당 문구가 load_error로 끝나길래 오류 발생한줄 알았으나, terminal 상단의 제목표시줄이 바뀌는걸 보고 다운받는 중이란걸 알 수 있었다) 12$ brew install e2fsprogs==&gt; Installing dependencies for e2fsprogs: gettext diskutil 로 disk Identifier 얻기12345678910111213$ diskutil list/dev/disk0 (internal, physical): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme *750.2 GB disk0 1: EFI EFI 209.7 MB disk0s1 2: Apple_HFS Robert's OS X 749.3 GB disk0s2 3: Apple_Boot Recovery HD 650.0 MB disk0s3/dev/disk1 (external, physical): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme *250.1 GB disk1 1: EFI EFI 209.7 MB disk1s1 2: Apple_HFS Robert250G 249.7 GB disk1s2 본인이 사용할 HDD는 250G HDD로 ID는 disk1임을 알 수 있다. ext3 format1234$ sudo $(brew --prefix e2fsprogs)/sbin/mkfs.ext3 /dev/disk1Password:mke2fs 1.43.5 (04-Aug-2017)/dev/disk1: Resource busy while setting up superblock 위의 마지막 Resource 관련 메시지를 본다면, 해당 disk를 unmount 후 진행하면 된다. 123456$ diskutil unmount disk1s1Volume HDD_500 on disk1s1 unmounted$ sudo $(brew --prefix e2fsprogs)/sbin/mkfs.ext3 /dev/disk1mke2fs 1.43.5 (04-Aug-2017)... (중략)Writing superblocks and filesystem accounting information: done NAS 설정공유기 설정 페이지(default 192.168.1.1)에 접속해서 USB Application에서 필요한 것들(FTP, SAMBA 등)을 설치해서 사용하면 된다.관련 설명은 많이 존재하므로 생략. Reference site ASUS Router 모델별 Disks Compatibility List","categories":[],"tags":[{"name":"NAS","slug":"NAS","permalink":"http://khackskjs.github.io/tags/NAS/"},{"name":"ASUS","slug":"ASUS","permalink":"http://khackskjs.github.io/tags/ASUS/"},{"name":"RT-N56U","slug":"RT-N56U","permalink":"http://khackskjs.github.io/tags/RT-N56U/"}]},{"title":"hexo, markdown syntax","slug":"hexo-markdown-syntax","date":"2017-06-30T14:13:04.000Z","updated":"2017-08-17T13:48:06.000Z","comments":true,"path":"2017/06/30/hexo-markdown-syntax/","link":"","permalink":"http://khackskjs.github.io/2017/06/30/hexo-markdown-syntax/","excerpt":"","text":"유용한 markdown 문법Code1234# 3 backticks'''[language] [title] [url] [link text]code snippet''' YouTubevideo_id: 유튜브에서 공유를 누른 후 나오는 URL 123&#123;% youtube video_id %&#125;# example&#123;% youtube q8GJh96pNu4 %&#125; Insert Postslug: 포스트 제목. 일자를 제외한 파일 제목.post_path: 해당 포스트의 URL 주소가 표시 됨post_link: 해당 포스트의 링크가 표시 됨 1234# Path&#123;% post_path slug %&#125;# Link&#123;% post_link slug [title] %&#125; Imagenew post 폴더별 설정 후 123456![&#123;description&#125;](&#123;Image path&#125;)# or&#123;% asset_img IMG_3391.JPG hi %&#125;# example![this is my picture](Its_me.jpg)","categories":[{"name":"blog","slug":"blog","permalink":"http://khackskjs.github.io/categories/blog/"}],"tags":[{"name":"tip","slug":"tip","permalink":"http://khackskjs.github.io/tags/tip/"}]},{"title":"블로그 시작 환경 설정 (Hexo, github pages)","slug":"Setting-Hexo-github-pages","date":"2017-06-21T15:05:33.000Z","updated":"2017-07-28T16:34:36.000Z","comments":true,"path":"2017/06/22/Setting-Hexo-github-pages/","link":"","permalink":"http://khackskjs.github.io/2017/06/22/Setting-Hexo-github-pages/","excerpt":"","text":"순서는 크게 아래 3단계 hexo 설치 및 정적 페이지 생성 github repository &amp; Disqus ID 생성 github 연동 및 Disqus 설정 후 배포 Let’s just Follow me. npm이 설치 되어 있지 않으면 node.js를 설치하면 npm이 설치된다. 1. hexo 설치 및 정적 페이지 생성설치1&gt; npm install -g hexo-cli hexo 프로젝트 생성 및 dependency download123&gt; hexo init \"sVeloperBlog\"&gt; cd sVeloperBlog&gt; npm install 포스트 파일 생성123&gt; hexo new \"first post\"# or&gt; hexo n \"first post\" /source/_post/first-post.md 가 생성됨 예제 포스트first-post.md12345678910111213141516# First postIt's my first post!## Introduce myselfHello I'm Robert Kim.## more..My Hobby List- swimming- cycling- watching movie- etc. 포스트 확인123&gt; hexo server# or&gt; hexo s 일반적으로 http://localhost:4000 으로 확인 가능하며, command line output 으로 주소 확인 가능. 정적 페이지 생성123&gt; hexo generate# or&gt; hexo g /blog/public/에 실제 호스팅에 사용할 웹 페이지가 생성된다. Notice정적 페이지에 변경이 제대로 반영되지 않을 경우 hexo clean 후 hexo generate 2. github repository &amp; Disqus ID 생성github repositorygithub로 이동 후 가입 &amp; 로그인 한다. 우상단의 New repository를 선택한다. Repository name에 본인의 {github ID}.github.io 로 입력한 후 Create repository선택.(이미 이 블로그가 khackskjs.github.io를 사용하고 있어서 already exists) Disqus ID 생성댓글용 Disqus서비스를 사용하기 위해 사이트로 이동 후 가입하거나 지원하는 SNS 연동 이름, 이메일(인증 필요)을 이용해서 가입한다.이 블로그를 위해 khackskjs@gmail.com 계정은 이용중이므로, 다른 도메인 메일을 통해 이미지 캡쳐 코멘트를 이용 할 것이므로 위의 I want to comment on sites를 선택한다. Disqus의 구독 서비스를 이용하라는거 같은데 그냥 스킵하고, 우상단의 유저 아이콘을 선택한다. 계정설정 화면이 나오면 Edit Profile을 선택한다. 계정설정 화면에서 Acount탭에서 Username을 설정한다.disqus service를 통틀어 고유한 이름이어야 하며, 이를통해 hexo와 연동이 가능하다.(hexo _config.yml에서 disqus_shortname에 사용) 3. github 연동 및 Disqus 설정 후 배포git에 배포 해주는 플러긴을 설치한다. 1&gt; npm i hexo-deployer-git --save GitHub 계정 및 disqus_shortname 을 입력한다. ./_config.yml123456789# URLurl: http://&#123;github_id&#125;.github.io/# Deploymentdeploy: type: git repo: https://github.com/&#123;github_id&#125;/&#123;github_id&#125;.github.io branch: master# for Disqusdisqus_shortname: sveloper 이제 설정은 끝났고, 위에서 생성한 페이지 (hexo g)를 배포한다. 123&gt; hexo deploy# or&gt; hexo d github로 push가 되었을 것이다._config.yml파일의 url에 입력한 주소(ex: http://khackskjs.github.io/)로 이동하면 블로그가 보일 것이다.(입력은 http, 호스팅은 https) 기본적인 사용은 위의 포스팅을 따르면 문제 없을 것이다.(문제가 있다면 댓글 주시면 반영토록 하겠습니다) 좀 더 고급진(?) 사용을 원한다면 아래 링크들을 참조 하길 바란다. hexo, markdown syntax Tag Pluginshexo.io","categories":[{"name":"Blog","slug":"Blog","permalink":"http://khackskjs.github.io/categories/Blog/"},{"name":"Hexo","slug":"Blog/Hexo","permalink":"http://khackskjs.github.io/categories/Blog/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://khackskjs.github.io/tags/Hexo/"},{"name":"Environment","slug":"Environment","permalink":"http://khackskjs.github.io/tags/Environment/"},{"name":"Follow me","slug":"Follow-me","permalink":"http://khackskjs.github.io/tags/Follow-me/"}]},{"title":"Ground Rule","slug":"Ground-Rule","date":"2017-06-21T14:49:01.000Z","updated":"2017-06-21T15:04:44.000Z","comments":true,"path":"2017/06/21/Ground-Rule/","link":"","permalink":"http://khackskjs.github.io/2017/06/21/Ground-Rule/","excerpt":"","text":"나의 Posting에 공통으로 적용 할 알아두면 좋을 규칙들 Shell Command 아래 소스코드에서 &gt;는 windows, $는 Linux 계열의 shell에 입력함을 의미한다. (간혹 필요할 경우, 입력 결과도 넣을 예정) 12345&gt; ipconfig$ ping 127.0.0.1PING 127.0.0.1 (127.0.0.1): 56 data bytes64 bytes from 127.0.0.1: icmp_seq=0 ttl=64 time=0.090 ms Let’s just Follow me.아래와 같이 Caution으로 시작하는 주의 부분이 있지 않는이상 코드만 따라가도 문제 없음. Caution이 아래 부분은 요로쿵 조로쿵 해서 주의가 필요 하다.꼭 봐야 하는건 아니지만, 소스만 보고했다가 안되면 1순위로 보라는 의미 1console.warn(`Caution`);","categories":[{"name":"Blog","slug":"Blog","permalink":"http://khackskjs.github.io/categories/Blog/"}],"tags":[{"name":"ground rule","slug":"ground-rule","permalink":"http://khackskjs.github.io/tags/ground-rule/"}]},{"title":"블로그를 시작하며","slug":"starting-blog","date":"2017-06-21T12:44:18.000Z","updated":"2017-07-26T12:30:53.000Z","comments":true,"path":"2017/06/21/starting-blog/","link":"","permalink":"http://khackskjs.github.io/2017/06/21/starting-blog/","excerpt":"","text":"블로그. 일하다 필요에 의해 혹은 호기심으로 공부한 것들은 자주 접하지 않으면 얼마 지나지 않아 사라져 버린다. (나의 기억력은 RAM이라 불리우는…)그리고 대충 정리해서 두다보면 여기저기 분산되어 유실되거나, 추후 보면 알아 볼 수가 없다.이런 필요에 의해 뭔가 일원화된 정리방법이 필요했다.그럼에도 불구하고 이쁘게 혹은 보기 좋게 글을 작성하기가 쉽지 않을 것 같아 보여 블로그는 엄두를 내지 못하고 있었다. 궁하면 통하는법. 나의 요구는 다음과 같았다. source code 적용 가능 깔끔한 정리가 가능하되, 깔끔함을 위한 시간&amp;노력 대비 결과가 좋아야 함 Comment - 소통 오픈형 마침내 정리 할 방법을 찾았다. Markdown을 어느정도 익히고(정말 간단한 문법들), hexo를 이용하면 정적사이트를 생성 할 수 있다.그렇게 생성한 페이지는 github pages로 호스팅해서 블로그로 운영 할 수 있다.Comment는 정적 사이트가 아니므로 Disqus에 붙여 해결 할 수 있다. 뭔가 엄청 복잡하고 어려워 보이는데.. 실은 별거없이 **블로그 시작하기**를 따라하면 ‘나도 블로거 1일차’.(comment 붙이는데 너무 오래 걸렸다! 검색만 잘 하면 한글로 설명해놓은 블로거들이 있어 쉬움에도 불구하고..) 그럼 조금 더 쉽게 밥상에 숟가락을 얻기 위해 나의 포스팅에 적용 될 Ground Rule 을 알아 보자.","categories":[{"name":"Blog","slug":"Blog","permalink":"http://khackskjs.github.io/categories/Blog/"}],"tags":[{"name":"blog","slug":"blog","permalink":"http://khackskjs.github.io/tags/blog/"}]}]}